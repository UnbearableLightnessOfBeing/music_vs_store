// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments
  (user_id, name, text) values ($1, $2, $3)
RETURNING id, user_id, name, text, created_at
`

type CreateCommentParams struct {
	UserID int32  `json:"user_id"`
	Name   string `json:"name"`
	Text   string `json:"text"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.UserID, arg.Name, arg.Text)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT id, user_id, name, text, created_at FROM comments
`

func (q *Queries) GetComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
